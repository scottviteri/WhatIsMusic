(sys:load "/home/scottviteri/LocalSoftware/Extempore/libs/core/instruments.xtm")
(sys:load "/home/scottviteri/LocalSoftware/Extempore/libs/core/instruments-scm.xtm")

(bind-instrument synth synth_note_c synth_fx)
(bind-func dsp:DSP
  (lambda (in time chan dat)
    (synth in time chan dat)))

(dsp:set! dsp)

(define play-chord
  (lambda (notes)
    (if (not (null? notes))
        (begin (play-note (now) synth (car notes) 100 *second*)
               (play-chord (cdr notes))))))

(play-chord '(60 64 67 71))

(define (equal-temp-make-interval half-steps)
  (lambda (ch1 ch2) (lambda (root) `(,(ch1 root) ,(ch2 (+ half-steps root))))))

(define (U root) root)
(define m2 (equal-temp-make-interval 1))
(define M2 (equal-temp-make-interval 2))
(define m3 (equal-temp-make-interval 3))
(define M3 (equal-temp-make-interval 4))
(define P4 (equal-temp-make-interval 5))
(define TT (equal-temp-make-interval 6))
(define P5 (equal-temp-make-interval 7))
(define m6 (equal-temp-make-interval 8))
(define M6 (equal-temp-make-interval 9))
(define m7 (equal-temp-make-interval 10))
(define M7 (equal-temp-make-interval 11))
(define P8 (equal-temp-make-interval 12))
(define m9 (equal-temp-make-interval 13))
(define M9 (equal-temp-make-interval 14))

(define (flatten x)
  (cond ((null? x) '())
        ((pair? x) (append (flatten (car x)) (flatten (cdr x))))
        (else (list x))))

(define (play-equal-temp chrd)
  (play-chord (flatten chrd)))

(define Imaj7
  (M3 (P5 U U) (P5 U U)))
(define Imaj7'
  (P5 (M3 U U) (M3 U U)))
(define Imaj7''
  (M3 U (m3 U (M3 U U))))
(define Imaj7'''
  (M7 (P5 (M3 U U) U) U))

(Imaj7 60)
(Imaj7' 60)
(Imaj7'' 60)
(Imaj7''' 60)

(play-equal-temp (U 60))
(play-equal-temp ((P5 U U) 60))
(play-equal-temp (Imaj7 60))

#|
You can also think of the trees as different ways of splitting the chord up into two explanatory subchords. I am considering the best explanation to be the one where the component chords sound as simple or consonant as possible.

To build some intuition for the difference between trees, we can play both subtrees after one another.
|#

(define (play-chord-at-time time notes)
  (if (not (null? notes))
      (begin (display (car notes))
             (play-note time synth (car notes) 80 *second*)
             (play-chord-at-time time (cdr notes)))))

(play-chord-at-time (now) '(60 63 67 70))

(define (snd lst)
  (car (cdr lst)))

(define (play-chord-components notes-tree)
  (play-chord-at-time (now) (flatten (car notes-tree)))
  (play-chord-at-time (+ *second* (now)) (flatten (snd notes-tree)))
  (play-chord-at-time (+ (* 2 *second*) (now)) (flatten notes-tree)))

(play-chord-components '((60 67) (64 71)))
(play-chord-components (Imaj7 60))
(play-chord-components (Imaj7' 60))
(play-chord-components (Imaj7'' 60))
(play-chord-components (Imaj7''' 60))

#|
How to make an algorithm that takes a list of pitches and derives a optimal tree?
Naive algo -- consider all pairwise intervals.

What would be a proper scoring function on the trees?
Want notion of how dissonant/consonant an interval is.
I believe that it would depend on the harmonic spectrum of a particular instrument.

Maybe consonance can be measured by the similarity of the Fourier spectrum.
So dissonance would be measured by taking the sum of the subtraction of the normalized spectra over all freq bins.
This metric would change based on the particular instrument, which very well might be desired.
It makes sense that certain intervals might be more or less dissonant on different instruments due to differing tambor.

But for this analysis I want a consonance metric that is invariant on the particular instrument.
Also, there is something missing from the notion of just subtracting the spectra: and octaves sounds similar even as pure sign waves.

An easy instrument irrelevent metric would just be as follows:

Unison: 0
Octave: 1
P5: 2
P4: 3
M3: 4
M6: 5
m3: 6
m6: 7
M2: 8
m7: 9
m2: 10
M7: 11
TT: 12

Could maybe extend past octave by adding 1 cost for each octave.
Adding, because the farther apart the notes are, the more they are distinguishable.

|#

(define (cost num-half-steps)
  (+ (quotient num-half-steps 12)
     (cdr
      (assoc (remainder num-half-steps 12)
            '((0 . 0)
              (7 . 2)
              (5 . 3)
              (4 . 4)
              (9 . 5)
              (3 . 6)
              (8 . 7)
              (2 . 8)
              (10 . 9)
              (1 . 10)
              (11 . 11)
              (6 . 12))))))

(cost 13) -- (cost 1) + (cost 12) = 10 + 1 = 11
(cost 0)  -- 0
(cost 36) -- 3 * (cost 12) = 3

#|
How to get the cost of the whole tree?

    M3
  /   \
 P5   P5
/ \  / \
U U  U  U

'((0 7) (4 11))
'(

|#

(define (deep-car pair)
  (if (pair? pair)
      (deep-car (car pair))
      pair))

(deep-car 0) -- 0
(deep-car '(0 7)) -- 0
(deep-car '((0 7) (4 11))) -- 0
(deep-car (Imaj7'' 0)) -- 0
(deep-car (Imaj7''' 0)) -- 0

(define (tree-cost note-tree)
  (if (pair? note-tree)
      (let ((fst (car note-tree))
            (snd (car (cdr note-tree))))
        (+ (tree-cost fst)
           (tree-cost snd)
           (cost (- (deep-car snd) (deep-car fst)))))
      0))

(define (intervals-cost interval-tree)
  (tree-cost (interval-tree 0)))

(Imaj7 60) -- '((60 67) (64 71))
(Imaj7' 60) -- '((60 64) (67 71))
(tree-cost '(60 67)) -- 2
(tree-cost '((60 67) (64 71))) -- 8
(tree-cost '((60 64) (67 71))) -- 10

(play-chord-components '((60 67) (64 71)))
(play-chord-components '((60 64) (67 71)))

#|

Now we can consider all possible trees on the given set of notes, and simply pick the one with lowest cost.

Consider the major triad for enumeration.
|#

((M3 U (m3 U U)) 0) -- '(0 (4 7))
((P5 (M3 U U) U) 0) -- '((0 4) 7)
-- what about '((0 7) 4)?
((M3 (P5 U U) U) 0) -- '((0 7) 4)
-- I think this is all of them

(map tree-cost '((0 (4 7))
                 ((0 4) 7)
                 ((0 7) 4))) -- last two have smaller costs
-- the number of binary trees with three leaves is only two

-- back to Imaj7
((M3 (P5 U U) (P5 U U)) 0) -- '((0 7) (4 11)) <-- three poss with this parenthesization
((P5 (M3 U U) (M3 U U)) 0) -- '((0 4) (7 11))
((M3 U (m3 U (M3 U U))) 0) -- '(0 (4 (7 11))) <-- only possible with this parenthesization
((M7 (P5 (M3 U U) U) U) 0) -- '(((0 4) 7) 11)

-- some more
((M7 (M3 (P5 U U) U) U) 0) -- '(((0 7) 4) 11) <-- 3! with this parenthesization
((M3 U (P5 (m3 U U) U)) 0) -- '(0 ((4 7) 11))
((M7 (M3 U (m3 U U)) U) 0) -- '((0 (4 7)) 11)
((M3 (M7 U U) (m3 U U)) 0) -- '((0 11) (4 7)) <-- outside to inside intervals ((M3 (P5 U (M3 U U)) U) 0) -- '((0 (7 11)) 4)
-- there are likely way more

(map tree-cost '(((0 7) (4 11))
                 ((0 4) (7 11))
                 (0 (4 (7 11)))
                 (((0 4) 7) 11)
                 (((0 7) 4) 11)
                 (0 ((4 7) 11))
                 ((0 (4 7)) 11)
                 ((0 11) (4 7))
                 ((0 (7 11)) 4))) -- best measure is from '((0 7) (4 11)) as expected

#|
Only rule is that deep-car's must be increasing.
Can only make pairs as opposed to longer lists.
Though the number of branches can vary, the number of leaves must equal the number of notes.
The number of trees is invariant on our particular choice of notes.

This number probably blows up really quickly.
Consider the following greedy algo:
built-trees = '() <-- assoc list of left-most leaf to tree
available-notes = (flat list of notes in chord) -- eg '(0 7 4 11)
while len(available-notes) > 1:
  note-pairs = '((a,b) in (available-notes * available-notes) st a < b)
  interval = (most consonant interval with a match in note-pairs)
  matched_note_pair = (some note_pair '(a,b) st b - a == interval)

  if ((a in built-trees.keys()) and (b in built-trees.keys())):
    built-trees[a] = (list built-trees[a] built-trees[b])
    available-notes.remove(b)
  elif (a in built-trees.keys()):
    built-trees[a] = (list built-trees[a] b)
    available-notes.remove(b)
  elif (b in built-trees.keys()):
    built-trees[a] = (list a build_trees[b])
    built-trees.remove(b)
    available-notes.remove(b)
  else:
    build_trees[a] = (list a b)
    available-notes.remove(b)

return available-notes[min(chord)]
|#

(define (assoc-ref key assoc_list)
  (cdr (assoc key assoc_list)))

(assoc-ref 0 '((0 . 1)))


(define (fold-right f init seq)
  (if (null? seq)
      init
      (f (car seq)
         (fold-right f init (cdr seq)))))

(define (list-min lst)
  (fold-right min 1000000 lst))

(list-min '(2 4 1 3))

(define (shallow-flatten lst_of_lsts)
  (fold-right append '() lst_of_lsts))

(shallow-flatten '((1 2) (3 4) (5 (6 7)))) -- (1 2 3 4 5 (6 7))

(define (product l1 l2)
  (define (create-pairs elem lst)
    (map (lambda (l2_elem) `(,elem . ,l2_elem)) lst))
  (shallow-flatten (map (lambda (l1_elem) (create-pairs l1_elem l2)) l1)))

(product '(1 2) '(3 4)) -- ((1 . 3) (1 . 4) (2 . 3) (2 . 4))

(define (ordered? pair) (< (car pair) (cdr pair)))
(ordered? '(1 . 2)) -- #t
(ordered? '(2 . 1)) -- #f
(define (get-note-pairs chord)
  (filter ordered? (product chord chord)))

(get-note-pairs '(0 4 7)) -- ((0 . 4) (4 . 7) (0 . 7))
(get-note-pairs '(0 4 7 11)) -- ((0 . 4) (0 . 7) (0 . 11) (4 . 7) (4 . 11) (7 . 11))

(define (make-intervals-list num-octaves)
 (define (make-intervals-list-helper orig num-octaves num-iters accum)
   (if (> num-octaves 0)
       (make-intervals-list-helper orig (- num-octaves 1) (+ num-iters 1)
                                   (append accum (map (lambda (x) (+ x (* 12 num-iters))) orig)))
       accum))
 (make-intervals-list-helper '(0 7 5 4 9 3 8 2 10 1 11 6) num-octaves 0 '()))

(make-intervals-list 2)

(define (get-matched-note-pair note-pairs intervals)
  (if (null? intervals) (begin (println "empty") '())
      (let* ((interval (car intervals))
             (matches (filter (lambda (p) (= interval (- (cdr p) (car p)))) note-pairs)))
        (if (null? matches)
            (get-matched-note-pair note-pairs (cdr intervals))
            (car matches)))))

(get-matched-note-pair '((1 . 2) (2 . 4)) '(3 2)) -- (2 . 4)

(define (logical-or p q)
  (cond (p #t)
        (q #t)
        (else #f)))

(logical-or #t #f)
(logical-or #f #f)
(logical-or #t #t)

(define (logical-and p q)
  (if p (if q #t #f) #f))

(define (in? elem lst)
  (fold-right (lambda (y x) (logical-or x (= y elem))) #f lst))

(in? 1 '(2 1 3)) -- #t
(in? 4 '(2 1 3)) -- #f

(define (deep-map f lst-of-lsts)
  (define (deep-map-helper f)
    (lambda (lst-of-lsts)
      (if (list? lst-of-lsts)
          (map (deep-map-helper f) lst-of-lsts)
          (f lst-of-lsts))))
  ((deep-map-helper f) lst-of-lsts))

(deep-map (lambda (x) (+ x 1)) '(1 ((2 3) 4))) -- (2 ((3 4) 5))

(define (delq elem lst)
  (filter (lambda (x) (not (eq? x elem))) lst))

(delq 1 '(2 1 1 3))
(delq 'b '(a b c d))

(get-note-pairs '(1 3 4 5))
(make-intervals-list 1)

(define (del-assoc object alist)
  (filter (lambda (p) (not (= object (car p)))) alist))

(del-assoc 1 '((2 . 3) (1 . 4))) -- ((2 . 3))

(define (parenthesize chord)
  (define (parenthesize-helper built-trees available-notes)
     (if (> (length available-notes) 1)
         (let* ((note-pairs (get-note-pairs available-notes))
                (intervals (make-intervals-list 2))
                (matched-note-pair (get-matched-note-pair note-pairs intervals))
                (a (car matched-note-pair))
                (b (cdr matched-note-pair))
                (built-tree-keys (map car built-trees)))
           (cond ((logical-and (in? a built-tree-keys) (in? b built-tree-keys))
                    (let* ((a-tree (assoc-ref a built-trees))
                           (b-tree (assoc-ref b built-trees))
                           (new-built-trees (cons (cons a (list a-tree b-tree))
                                                   (del-assoc a (del-assoc b built-trees)))))
                      (parenthesize-helper new-built-trees (delq b available-notes))))

                 ((in? a built-tree-keys)
                  (let* ((a-tree (assoc-ref a built-trees))
                         (new-built-trees (cons (cons a (list a-tree b))
                                                 (del-assoc a built-trees))))
                    (parenthesize-helper new-built-trees (delq b available-notes))))

                 ((in? b built-tree-keys)
                  (let* ((b-tree (assoc-ref b built-trees))
                         (new-built-trees (cons (cons a (list a b-tree))
                                                 (del-assoc b built-trees))))
                    (parenthesize-helper new-built-trees (delq b available-notes))))

                 (else
                  (let ((new-built-trees (cons (cons a (list a b)) built-trees)))
                    (parenthesize-helper new-built-trees (delq b available-notes))))))

           (assoc-ref (car available-notes) built-trees)))

    (parenthesize-helper '() chord))


(parenthesize '(0 4 7 11)) -- ((0 7) (4 11))
(parenthesize '(0 4 11 7)) -- ((0 7) (4 11))
(parenthesize '(11 7 0 4)) -- ((0 7) (4 11))

(parenthesize '(0 4 7)) -- ((0 7) 4)
(tree-cost '((0 7) 4))
(tree-cost '(0 (4 7))) -- chose the better one

(define (plus60 x) (+ x 60))
(play-chord-components (deep-map plus60 '((0 7) 4)))
(play-chord-components (deep-map plus60 '(0 (4 7))))
-- the first sounds more like two different individual notes being added together
-- as opposed to two different chords added together

(parenthesize '(0 3 7 10)) -- ((0 7) (3 10))
-- min7 is two fifths separated by an m3

(parenthesize '(0 2 5 7))  -- (((0 7) 5) 2)
(tree-cost '(((0 7) 5) 2)) -- 12 <-- chose the better one
(tree-cost '((0 5) (2 7))) -- 13


(parenthesize '(0 4 7 10)) -- (((0 7) 4) 10)
(tree-cost '(((0 7) 4) 10)) -- 15
(tree-cost '((0 4) (7 10))) -- 12 <-- did not pick best here
-- maybe could bias toward building balanced trees, but for now, good enough
-- should try more test cases with left parenthesization
-- If someone can figure out how to brute force this algorithm I will happily accept a pull request

(define (in-keys? object alist)
  (in? object (map car alist)))

(define (note-tree-to-intervals note-tree)
  (if (pair? note-tree)
      (let* ((fst (car note-tree))
             (snd (car (cdr note-tree)))
             (interval-names '((0 . U) (1 . m2) (2 . M2)
                               (3 . m3) (4 . M3) (5 . P4)
                               (6 . TT) (7 . P5) (8 . m6)
                               (9 . M6) (10 . m7) (11 . M7)
                               (12 . Oct)))
             (interval-num (- (deep-car snd) (deep-car fst))))

        (cons (if (in-keys? interval-num interval-names)
                  (assoc-ref interval-num interval-names)
                  interval-num)
              (list (note-tree-to-intervals fst) (note-tree-to-intervals snd))))
      'U))

(note-tree-to-intervals '((0 7) (4 11))) --  (M3 (P5 U U) (P5 U U))

(define (compose g f)
  (lambda (x) (g (f x))))

(define get-interval-tree
  (compose note-tree-to-intervals parenthesize))

(get-interval-tree '(0 4 7 11)) -- (M3 (P5 U U) (P5 U U))
(get-interval-tree '(0 4 7)) -- (M3 (P5 U U) U)
-- a major triad is made up of primary two pieces: the root-fifth combination and the M3

(get-interval-tree '(0 3 7 10)) -- (m3 (P5 U U) (P5 U U))
-- a minor 7th chord is made up of two fifths, starting at the root and m3, respectively

(get-interval-tree '(0 2 5 7))  -- (M2 (P4 (P5 U U) U) U)
-- this weird chord is not made up of two P4's as I had guessed
-- rather it is closer to a 1-4-5 chord with an added M2
-- notice for instance, that holding down 1-4-5 and adding the 2 changes the sound more than holding down 1-2-5 and adding the 4
-- this one is debatable and will be relatively sensitive to our particular cost metric
-- our metric is not considering the fourths harmonious enough to prefer over the first interpretation
-- here are the two versions played side by side

(play-chord-components (deep-map plus60 '(((0 7) 5) 2)))
(play-chord-components (deep-map plus60 '((0 5) (2 7))))


-- (the dissonance gives the flavor)
(get-interval-tree '(0 4 7 10)) -- (m7 (M3 (P5 U U) U) U)
-- the better analysis is a M3 and a m3 separated by a fifth
-- the heuristic instead picks up a major triad + a m7

(define (get-intervals-and-play chord)
  (play-chord-components ((eval (get-interval-tree chord)) (list-min chord))))

(get-intervals-and-play (deep-map plus60 '(0 4 7 10)))


-- I11
(get-interval-tree '(0 4 7 10 14 17)) -- (m7 (M3 (P5 U U) U) (M3 (P5 U U) U))

#|
I11

       m7
      /  \
     M3   M3
    / \   / \
   P5  U  P5 U
  / \    / \
 U   U   U  U

Remember that the tree for the major triad "I" looked like the following:

    M3
   / \
  P5  U
 / \
U   U

AKA the root and the 3rd are the most important notes in the triad, because the fifth is more redundant.
We can then write I11 as:

   m7
  / \
 I   I

AKA two major triads separated by a minor seventh.

#|

-- Here it is played aloud
(get-intervals-and-play (deep-map plus60 '(0 4 7 10 14 17)))

|#

What if we added the 13 into the mix?

|#

-- I13
(get-interval-tree '(0 4 7 10 14 17 21)) -- (m7 (M3 (P5 U U) U) (M3 (P5 U U) (P5 U U)))

|#

    m7
   / \
  I   M3
     / \
    P5  P5
   / \  / \
  U   U U  U

But we've seen that shape on the right before.
It is our preferred tree representation of Imaj7.

  m7
 / \
I   Imaj7

So a good description of I13 is a major triad and a maj7 chord separated by a m7.

#|

-- here it is played aloud

(define I
  (M3 (P5 U U) U))
(define Imaj7
  (M3 (P5 U U) (P5 U U)))

(intervals-cost (m7 I Imaj7)) -- 23
((m7 I Imaj7) 50)
(play-chord-components ((eval (m7 I Imaj7)) 55))

#|

Note that this is not quite my characterization of the mixolydian scale because here octave differences are relevant (because they add to distinguishability of notes).
When I run the algorithm on the mixolydian scale I get the following:
|#

(get-interval-tree '(0 2 4 5 7 9 10)) -- (M2 (M3 (P4 (P5 U U) U) U) (m6 (P5 U U) U))
(intervals-cost (M2 (M3 (P4 (P5 U U) U) U) (m6 (P5 U U) U))) -- 26
(play-chord-components ((M2 (M3 (P4 (P5 U U) U) U) (m6 (P5 U U) U)) 55))

-- what if I tried to characterize in terms of (M2 I7 I)?
(get-interval-tree '(0 4 7 10))
(define I7
  (m7 (M3 (P5 U U) U) U))
(intervals-cost (M2 I7 I)) -- 29

-- so the decomposition I find is better than (M2 I7 I)
-- this is because the dom 7 is pretty dissonant
-- that said, if I7 was derived as M3 and m3 apart by P5, then the cost would be 3 less
-- so in that sense should be equally good, though the dom 7 split sounds more right to my ear
(play-chord-components ((eval (M2 I7 I)) 55))

|#
What about regular Aeolian?
Check against (M2 Imaj7 i).
#|

(get-interval-tree '(0 2 4 5 7 9 11)) -- (M2 (M3 (P4 (P5 U U) U) (P5 U U)) (P5 U U))
(intervals-cost (eval (get-interval-tree '(0 2 4 5 7 9 11)))) -- 21
(get-intervals-and-play (map plus60 '(0 2 4 5 7 9 11)))

(get-interval-tree '(0 3 7)) -- (m3 (P5 U U) U)
(define i
  (m3 (P5 U U) U))
(intervals-cost (M2 Imaj7 i)) -- 24
(play-chord-components ((eval (M2 Imaj7 i)) 60))

-- the algorithm found a lower cost version than (M2 Imaj7 i)

#|

It is not finding the most intuitive explanations of scales, but that could very well be because there actually are no great ways to break up a scale sequence into consonant chunks.

The results for chords so far seem to be working well, and following my intuition to some degree.

In part3.xtm we will see how operations on these trees reflect into regular music theory.

#|
